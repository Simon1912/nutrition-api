export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Use POST' });
    }
    const { food, targetKcal } = req.body || {};
    const f = String(food || '').trim();
    const t = Number(targetKcal || 0);
    if (!f || !isFinite(t) || t <= 0) {
      return res.status(400).json({ error: "Provide 'food' and 'targetKcal' > 0" });
    }

    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    if (!OPENAI_API_KEY) {
      return res.status(500).json({ error: 'Missing OPENAI_API_KEY' });
    }

    const body = {
      model: "gpt-4o-mini",
      temperature: 0.2,
      messages: [
        { role: "system",
          content: "You are a nutrition assistant. Estimate realistic calories per 100g for a given common food (no brands). Return ONLY compact JSON." },
        { role: "user",
          content: `Food: ${f}\nReturn JSON with key: kcal_per_100g (number).` }
      ]
    };

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    if (!r.ok) {
      const txt = await r.text().catch(() => "");
      return res.status(500).json({ error: `OpenAI ${r.status}: ${txt}` });
    }

    const json = await r.json();
    const content = json?.choices?.[0]?.message?.content ?? "{}";
    let parsed = {};
    try { parsed = JSON.parse(content); } catch {}
    const per100 = Number(parsed.kcal_per_100g);
    if (!isFinite(per100) || per100 <= 0) {
      return res.status(500).json({ error: "Invalid kcal_per_100g" });
    }
    const grams = t * (100 / per100);

    return res.status(200).json({
      food: f,
      targetKcal: t,
      kcal_per_100g: Number(per100.toFixed(1)),
      grams_for_target: Number(grams.toFixed(1)),
      explanation: `â‰ˆ ${grams.toFixed(0)} g ${f} to reach ${t} kcal at ~${per100.toFixed(0)} kcal/100g.`
    });
  } catch (e) {
    return res.status(500).json({ error: String(e?.message || e) });
  }
}
